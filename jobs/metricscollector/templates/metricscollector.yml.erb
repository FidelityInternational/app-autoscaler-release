<%
  def p_arr(property)
    p(property,nil) || []
  end

  instance_metrics_db_scheme = p('autoscaler.instancemetrics_db.db_scheme')
  instance_metrics_db_address = p('autoscaler.instancemetrics_db.address')
  instance_metrics_db_port = p('autoscaler.instancemetrics_db.port')
  instance_metrics_db_role = p_arr('autoscaler.instancemetrics_db.roles').find { |role| role['tag'] == 'instancemetricsdb' or role['tag'] == 'default' } 
  instance_metrics_db_database = p_arr('autoscaler.instancemetrics_db.databases').find { |database| database['tag'] == 'instancemetricsdb' or database['tag'] == 'default' } 
  instance_metrics_db_url = instance_metrics_db_scheme + "://" + instance_metrics_db_role['name'] + ":" + instance_metrics_db_role['password'] + "@" + instance_metrics_db_address + ":" + instance_metrics_db_port.to_s + "/" + instance_metrics_db_database['name'] + "?sslmode=disable"

  policy_db_scheme = p('autoscaler.policy_db.db_scheme')
  policy_db_address = p('autoscaler.policy_db.address')
  policy_db_port = p('autoscaler.policy_db.port')
  policy_db_role = p_arr('autoscaler.policy_db.roles').find { |role| role['tag'] == 'policydb' or role['tag'] == 'default'  }
  policy_db_database = p_arr('autoscaler.policy_db.databases').find { |database| database['tag'] == 'policydb' or database['tag'] == 'default' }
  policy_db_url = policy_db_scheme + "://" + policy_db_role['name'] + ":" + policy_db_role['password'] + "@" + policy_db_address + ":" + policy_db_port.to_s + "/" + policy_db_database['name'] + "?sslmode=disable"

  lock_db_scheme = p('autoscaler.lock_db.db_scheme')
  lock_db_address = p('autoscaler.lock_db.address')
  lock_db_port = p('autoscaler.lock_db.port')
  lock_db_role = p_arr('autoscaler.lock_db.roles').find { |role| role['tag'] == 'lockdb' or role['tag'] == 'default'  }
  lock_db_database = p_arr('autoscaler.lock_db.databases').find { |database| database['tag'] == 'lockdb' or database['tag'] == 'default' }
  lock_db_url = lock_db_scheme + "://" + lock_db_role['name'] + ":" + lock_db_role['password'] + "@" + lock_db_address + ":" + lock_db_port.to_s + "/" + lock_db_database['name'] + "?sslmode=disable"
%>


cf:
  api:  <%= p("autoscaler.cf.api") %>
  grant_type: <%= p("autoscaler.cf.grant_type") %>
  username:  <%= p("autoscaler.cf.username") %>
  password:  <%= p("autoscaler.cf.password") %>
  client_id: <%= p("autoscaler.cf.client_id") %>
  secret: <%= p("autoscaler.cf.secret") %>
  skip_ssl_validation: <%= p("autoscaler.cf.skip_ssl_validation") %>

server:
  port:  <%= p("autoscaler.metricscollector.server.port") %>
  tls:
    key_file: /var/vcap/jobs/metricscollector/config/certs/metricscollector/server.key
    cert_file: /var/vcap/jobs/metricscollector/config/certs/metricscollector/server.crt
    ca_file: /var/vcap/jobs/metricscollector/config/certs/metricscollector/ca.crt

logging:
  level: <%= p("autoscaler.metricscollector.logging.level") %>

db:
  policy_db:
    url: <%= policy_db_url %>
    max_open_connections: <%= p("autoscaler.policy_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.policy_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.policy_db_connection_config.connection_max_lifetime") %>
  instance_metrics_db:
    url: <%= instance_metrics_db_url %>
    max_open_connections: <%= p("autoscaler.instancemetrics_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.instancemetrics_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.instancemetrics_db_connection_config.connection_max_lifetime") %>

collector:
  refresh_interval: <%= p("autoscaler.metricscollector.collector.refresh_interval") %>
  collect_interval: <%= p("autoscaler.metricscollector.collector.collect_interval") %>
  collect_method: <%= p("autoscaler.metricscollector.collector.collect_method") %>

lock:
  lock_ttl: <%= p("autoscaler.metricscollector.lock.lock_ttl") %>
  lock_retry_interval: <%= p("autoscaler.metricscollector.lock.lock_retry_interval") %>
  consul_cluster_config: <%= p("autoscaler.metricscollector.lock.consul_cluster_config") %>

db_lock:
  lock_db:
    url: <%= lock_db_url %>
    max_open_connections: <%= p("autoscaler.lock_db_connection_config.max_open_connections") %>
    max_idle_connections: <%= p("autoscaler.lock_db_connection_config.max_idle_connections") %>
    connection_max_lifetime: <%= p("autoscaler.lock_db_connection_config.connection_max_lifetime") %>

enable_db_lock: <%= p("autoscaler.metricscollector.enable_db_lock") %>
